singularity {
	enabled = true
	singularity.autoMounts = true
    singularity.cacheDir = "/data/singularity_containers/"
	runOptions="--fakeroot -B /data:/data"
}

executor {
  $lsf {
      queueSize = 100
      pollInterval = '30sec'
  }
  $local {
      cpus = 60
      memory = '232 GB'
  }
}

SPADES.shell = ['/bin/bash/', '-e']

params {
	//Databases
	gtdbtk_db = '/data/databases/GTDB/release207_v2/'
    gtdbtk_db_skani = '/data/databases/GTDB/release207_v2/fastani/database/gtdb_skani_database_ani'
	homopolish_db = '/scratch/hdd2/2022_Petros/nextflow_test/databases/homopolish_db/bacteria.msh'
	bakta_db =      '/scratch/hdd2/2022_Petros/nextflow_test/databases/bakta_db/db'
	platon_db =     '/scratch/hdd2/2022_Petros/nextflow_test/databases/platon_db/db'
	bldb_db ='/scratch/hdd2/2022_Petros/nextflow_test/databases/bldb_db/merged.fasta'
	centrifuge_db='/data/databases/centrifuge_db'
	sourmash_db='/data/databases/mash/gtdb-rs202.genomic.k21.lca.json.gz'


    gtdbtk_pplacer_cpus = 12
    // gtdbtk_pplacer_scratch = 
    gtdbtk_min_perc_aa = 10 
    gtdbtk_min_af = 0.65

	//Trimming params

	adapter_file = 'databases/adapters/NexteraPE-PE.fa'
	sliding_window_quality_threshold = 20
	sliding_window_size = 5
	minqual = 28
	minlen = 50

	//BLDB and RGI parameters
	id_cutoff = 90

	
	// Max resource options
	// Defaults only, expecting to be overwritten
	max_memory                 = '150.GB'
	max_cpus                   = 40
	max_time                   = '240.h'

	//Docx template
	docx_template = '/scratch/hdd2/2022_Petros/nextflow_test/assets/reference.docx'
}

//import module config for DSL2
includeConfig 'conf/modules.config'


//import base.config for pipeline
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

